#!/usr/bin/env python

import sys
import os
import re
from ansible.module_utils.basic import AnsibleModule

from jinja2 import Environment, BaseLoader

from termcolor import colored

# Junos
from jnpr.junos import Device
from jnpr.junos.utils.config import Config
from jnpr.junos.exception import RpcError

# PAN-OS
from lxml import etree
import requests
from urllib.parse import quote
from io import StringIO, BytesIO

# NAPALM
from napalm import get_network_driver

# EOS
import pyeapi

# Junos
from jnpr.junos import Device
from jnpr.junos.utils.config import Config
from jnpr.junos.exception import RpcError

ANSIBLE_METADATA = {
    'metadata_version': '1.0',
    'status': ['preview'],
    'supported_by': 'Pedro Antunes <pedro.antunes@eplus.com>'
}

JUNOS_BANNER_TEMPLATE = '''
{% if banner is defined %}
system {
    login {
        message "{{ banner }}";
    }
}
{% endif %}
{% if motd is defined %}
system {
    login {
        announcement "{{ motd }}";
    }
}
{% endif %}
'''

EOS_HEREDOC_COMMANDS = [
    ("banner login", 1),
    ("banner motd", 1),
    ("comment", 1),
    ("protocol https certificate", 2),
]

EOS_BANNER_TEMPLATE = '''
!
{% if banner is defined %}
banner login
{{ banner }}
EOF
{% endif %}
{% if motd is defined %}
banner motd
{{ motd }}
EOF
{% endif %}
'''


JUNOS_BANNER_TEMPLATE = '''
{% if banner is defined %}
system {
    login {
        message "{{ banner }}";
    }
}
{% endif %}
{% if motd is defined %}
system {
    login {
        announcement "{{ motd }}";
    }
}
{% endif %}
'''


def _colorize(diff):
    colored_diff = []
    last_color = ''
    repeat_last_color = False
    for line in diff.splitlines():
        if repeat_last_color:
            if re.match(r'^\^C$', line):
                line = colored(line, last_color)
                repeat_last_color = False
            else:
                line = colored(line, last_color)
        else:
            if re.match('^.+\^C$', line):
                repeat_last_color = True
            if re.match(r'\s*\+', line):
                last_color = 'green'
                line = colored(line, 'green')
            elif re.match(r'\s*-', line):
                last_color = 'red'
                line = colored(line, 'red')
        colored_diff.append(line)
    return '\n'.join(colored_diff)


def _eos_multiline_convert(config, start="banner login", end="EOF", depth=1):
    """Converts running-config HEREDOC into EAPI JSON dict"""
    # Stolen from NAPALM.
    ret = list(config)  # Don't modify list in-place
    try:
        s = ret.index(start)
        e = s
        while depth:
            e = ret.index(end, e + 1)
            depth = depth - 1
    except ValueError:  # Couldn't find end, abort
        return ret
    ret[s] = {"cmd": ret[s], "input": "\n".join(ret[s + 1 : e])}
    del ret[s + 1 : e + 1]

    return ret

def _eos_mode_comment_convert(commands):
    """
    EOS has the concept of multi-line mode comments, shown in the running-config
    as being inside a config stanza (router bgp, ACL definition, etc) and beginning
    with the normal level of spaces and '!!', followed by comments.

    Unfortunately, pyeapi does not accept mode comments in this format, and have to be
    converted to a specific type of pyeapi call that accepts multi-line input

    Copy the config list into a new return list, converting consecutive lines starting with
    "!!" into a single multiline comment command

    :param commands: List of commands to be sent to pyeapi
    :return: Converted list of commands to be sent to pyeapi
    """
    # Stolen from NAPALM.

    ret = []
    comment_count = 0
    for idx, element in enumerate(commands):
        # Check first for stringiness, as we may have dicts in the command list already
        # commented by: only python 3 compatible
        #if isinstance(element, py23_compat.string_types) and element.startswith(
        if isinstance(element, str) and element.startswith(
            "!!"
        ):
            comment_count += 1
            continue
        else:
            if comment_count > 0:
                # append the previous comment
                ret.append(
                    {
                        "cmd": "comment",
                        "input": "\n".join(
                            map(
                                lambda s: s.lstrip("! "),
                                commands[idx - comment_count : idx],
                            )
                        ),
                    }
                )
                comment_count = 0
            ret.append(element)

    return ret

def _napalm_config(address, username, password, config_file, check_mode, dev_os, port, model, ssh_config_file=None,
        banner=None, motd=None,
        ssh_private_key_file=None, trim=0):

    driver = get_network_driver(dev_os)
    device = driver(address, username, password, optional_args=dict(port=port))
    device.open()

    if os.path.isfile(config_file):
        with open(config_file, "r") as f:
            post_config = f.read()
            f.close()
        sanitized_post_config = re.sub(r'license udi [\w ]+', "!", post_config, flags=re.MULTILINE)
        sanitized_post_config = re.sub(r'\^C', "", sanitized_post_config, flags=re.MULTILINE)
        device.load_replace_candidate(config=sanitized_post_config)
        #If the device doesnt differentiate between running and startup configuration this will an empty string
            
    # Set banner and motd if given
    if banner is not None or motd is not None:
        pass

    prepared = device.compare_config()

    if check_mode:
        device.discard_config()
    else:
        if prepared == "": 
            device.discard_config()
        else:
            device.commit_config()
            post_config = device.get_config(retrieve="running")['running']
            post_config = '\n'.join(post_config.split('\n')[trim:])
            with open(config_file, "w") as f:
                f.write(post_config)
                f.close()

    device.close()
    if prepared == "":
        return
    # Return diffs
    return dict(
            prepared=_colorize(prepared)
            )

def _eos_config(address, username, password, config_file, check_mode, trim, port=443, banner=None, motd=None, **kwargs):
    # Open device
    connection = pyeapi.connect(host=address, transport='https', port=port, username=username, password=password)
    device = pyeapi.client.Node(connection)
    ### Save original config
    pre_config = device.run_commands("show running-config", encoding="text")[0]['output']
    # remove first line showing the command that was run
    pre_config = '\n'.join(pre_config.split('\n')[trim:])

    commands = []
    commands.append("configure session vagrant")
    commands.append("rollback clean-config")

    ## if file exists we load it, otherwise it will be created when getting the config
    if os.path.isfile(config_file):
        # Apologies for stealing this portion of code from NAPALM
        with open(config_file, "r") as f:
            lines = f.readlines()

    for line in lines:
        line = line.strip()
        if line == "":
            continue
        if line.startswith("!") and not line.startswith("!!"):
            continue
        commands.append(line)

    for start, depth in [
        (s, d) for (s, d) in EOS_HEREDOC_COMMANDS if s in commands
    ]:
        commands = _eos_multiline_convert(commands, start=start, depth=depth)
    commands = _eos_mode_comment_convert(commands)
    device.run_commands(commands)

    # repeat the same with the banner
    commands = []
    commands.append("configure session vagrant")
    ## Set banner and motd if given
    banner_template = Environment(loader=BaseLoader).from_string(EOS_BANNER_TEMPLATE)
    banner_config = banner_template.render(banner=banner, motd=motd).replace("\\\\", "`").replace("\\n", "\n")
    lines = banner_config.splitlines()
    for line in lines:
        line = line.strip()
        if line == "":
            continue
        if line.startswith("!") and not line.startswith("!!"):
            continue
        commands.append(line)
    for start, depth in [
        (s, d) for (s, d) in EOS_HEREDOC_COMMANDS if s in commands
    ]:
        commands = _eos_multiline_convert(commands, start=start, depth=depth)
    commands = _eos_mode_comment_convert(commands)
    device.run_commands(commands)

    post_config = device.run_commands("show session-config named vagrant", encoding="text")[0]['output']
    post_config = '\n'.join(post_config.split('\n')[2:])

    if not check_mode:
        # Return and clean sessions if there is no diff
        # We still save the well formatter config
        if pre_config == post_config:
            device.run_commands("no configure session vagrant")
            with open(config_file, "w") as f:
                f.write(post_config)
                f.close()
                return

        # Commit config
        device.run_commands(["configure session vagrant",
                             "commit",
                             "no configure session vagrant",
                             "write memory",
                             ])
        # Save new config
        file = open(config_file, "w") 
        file.write(post_config)
        file.close()

    else:
        # Save candidate config
        device.run_commands("no configure session vagrant")
        if pre_config == post_config:
            return

    ## Return diffs
    return dict(
            before=pre_config,
            after=post_config
            )

def _junos_config(address, username, password, config_file, check_mode, trim, model,
        ssh_private_key_file=None, banner=None, motd=None,
        **kwargs):
    # Open device
    if ssh_private_key_file is not None and os.path.isfile(ssh_private_key_file):
        device = Device(host=address, user=username, ssh_private_key_file=ssh_private_key_file, port=22)
    else:
        device = Device(host=address, user=username, passwd=password, port=22)
    device.open(gather_facts=False)
    # Save original config
    pre_config = device.rpc.get_config(options={'format': 'text'}).text
    pre_config = '\n'.join(pre_config.split('\n')[trim:])
    # Create new config object
    device.bind(cu=Config)
    device.cu.lock()
    # if file exists we load it, otherwise it will be created when getting the config
    if os.path.isfile(config_file):
        device.cu.load(path=config_file, format="text", overwrite=True)

    # Set banner and motd if given
    #if banner is not None or motd is not None:
    #    banner_template = Environment(loader=BaseLoader).from_string(JUNOS_BANNER_TEMPLATE)
    #    device.cu.load(template=banner_template,
    #                 template_vars=dict(banner=banner, motd=motd), format="text", merge=True)

    ## we add these lines of config to vQFX devices in order to be able to halt or reload them
    ## otherwise at the next reboot they think they are a linecard with member id 0
    if model == 'vqfx':
        response = device.rpc.get_virtual_chassis_status_information()
        serial_no = response.xpath('//member-serial-number')[0].text
        device.cu.load('set virtual-chassis no-split-detection', format='set')
        device.cu.load('set virtual-chassis preprovisioned member 0 role routing-engine', format='set')
        device.cu.load("set virtual-chassis member 0 serial-number {}".format(serial_no), format='set')

    # Return immediately if there is no diff
    jdiff = device.cu.diff()
    if jdiff is None:
        device.cu.unlock()
        device.cu.rollback()
        device.close()
        return

    if not check_mode:
        # if there is no diff:
        #    - we commit-check (just to be sure that config is valid) and
        #    - save candidate (to get well formatted config)
        # otherwise we commit and save committed and return the diff
        if jdiff is None:
            device.cu.commit_check()
            post_config = device.rpc.get_config(options={'format': 'text', 'database': 'candidate'}).text
            post_config = '\n'.join(post_config.split('\n')[trim:])
            device.cu.unlock()
            device.close()
            with open(config_file, "w") as f:
                f.write(post_config)
                f.close()
            return

        ## Commit config
        device.cu.commit(comment='Configured by vagrant', timeout=120)
        device.cu.unlock()
        # Save new config
        post_config = device.rpc.get_config(options={'format': 'text', 'database': 'committed'}).text
        post_config = '\n'.join(post_config.split('\n')[trim:])
        with open(config_file, "w") as f:
            f.write(post_config)
            f.close()
    else:
        # if there is no diff:
        #    - we commit-check (just to be sure that config is valid) and
        #    - save candidate (to get well formatted config)
        device.cu.commit_check()
        post_config = device.rpc.get_config(options={'format': 'text', 'database': 'candidate'}).text
        device.cu.rollback()
        if jdiff is None:
            device.close()
            return

    device.close()
    # Return diffs
    return dict(
            before=pre_config,
            after=post_config
            )

def _panos_config(address, username, password, config_file, check_mode, banner=None, motd=None, **kwargs):
    # Get key
    url = "https://{}/api/?type=keygen&user={}&password={}".format(
         quote(address), quote(username), quote(password))
    response = requests.get(url, verify=False)
    tree = etree.parse(StringIO(response.text))
    key = tree.xpath('/response/result/key')[0].text

    # rollback
    url = "https://{}/api/?type=op&cmd={}&key={}".format(
        quote(address), quote("<load><config><last-saved/></config></load>"), quote(key))
    requests.get(url, verify=False)

    # Get current configuration
    url = "https://{}/api/?type=export&category=configuration&key={}".format(
          quote(address), quote(key))
    response = requests.get(url, verify=False)
    tree = etree.parse(StringIO(response.text))
    pre_config = etree.tostring(tree, pretty_print=True).decode('utf-8')


    # Import the config
    if os.path.isfile(config_file):
        url = "https://{}/api/?type=import&category=configuration&key={}".format(
                quote(address), quote(key))
        files = {'file': ('vagrant.xml', open(config_file, 'rb'), 'application/xml', {'Expires': '0'})}
        requests.post(url, files=files, verify=False)

        # Load the config
        url = "https://{}/api/?type=op&cmd={}&key={}".format(
                quote(address), quote("<load><config><from>vagrant.xml</from></config></load>"), quote(key))
        requests.get(url, verify=False)

    # create banner
    motd = motd.replace("\\n", "\n").replace("<", "&lt;").replace(">", "&gt;")
    url = "https://{}/api/?type=config&action=edit&xpath={}&element={}&key={}".format(
            quote(address), 
            quote("/config/devices/entry[@name='localhost.localdomain']/deviceconfig/system/motd-and-banner/message"), 
            quote("<message>"+motd+"</message>"),
            quote(key))
    r = requests.get(url, verify=False)

    # Save well-formatted config
    url = "https://{}/api/?type=export&category=configuration&key={}".format(
        quote(address), quote(key))
    response = requests.get(url, verify=False)
    tree = etree.parse(StringIO(response.text))
    post_config = etree.tostring(tree, pretty_print=True).decode('utf-8')

    ## Return diffs
    if pre_config == post_config:
        # rollback the config
        return
 
    if check_mode:
        # rollback
        url = "https://{}/api/?type=op&cmd={}&key={}".format(
            quote(address), quote("<load><config><last-saved/></config></load>"), quote(key))
        requests.get(url, verify=False)
    else:
        # Commit the config
        url = "https://{}/api/?type=commit&cmd={}&key={}".format(
                quote(address), quote("<commit><force></force></commit>"), quote(key))
        requests.get(url, verify=False)

        # Save well-formatted config
        with open(config_file, "w") as f:
            f.write(post_config)
            f.close()

    return dict(
            before=pre_config,
            after=post_config
            )

def run_module():

    module = AnsibleModule(
        argument_spec=dict(
            address=dict(type='str', required=True, aliases=['host','hostname']),
            dev_os=dict(type='str', required=True),
            username=dict(type='str', required=True),
            password=dict(type='str', required=True, no_log=True),
            config_file=dict(type='str', required=True),
            banner=dict(type='str', required=False),
            motd=dict(type='str', required=False),
            model=dict(type='str', required=True),
            ssh_private_key_file=dict(type='str', required=False),
            port=dict(type='int', required=False)
        ),
        supports_check_mode=True
    )

    address = module.params['address']
    dev_os = module.params['dev_os']
    username = module.params['username']
    password = module.params['password']
    config_file = module.params['config_file']
    model = module.params['model']

    if 'banner' in module.params:
        banner = module.params['banner']
    if 'motd' in module.params:
        motd = module.params['motd']
    if 'ssh_private_key_file' in module.params:
        ssh_private_key_file = module.params['ssh_private_key_file']
    if 'port' in module.params:
        port = module.params['port']

    _config = {
               'eos'    : _eos_config,
               'panos'  : _panos_config,
               'junos'  : _junos_config
    }

    _trim = {
               'eos'    : 2,
               'junos'  : 2
    }

    try:
        os.makedirs(os.path.dirname(config_file), 755)
    except FileExistsError:
        pass
    diff = _config[dev_os](address=address, 
                   username=username, password=password, ssh_private_key_file=ssh_private_key_file, 
                   check_mode=module.check_mode,
                   dev_os=dev_os, 
                   model=model,
                   trim=_trim[dev_os],
                   port=port,
                   config_file=config_file, banner=banner, motd=motd)

    if diff is None:
        result = dict(
            changed=False
        )
    else:
        result = dict(
            changed=True,
            diff=diff
        )

    module.exit_json(**result)



def main():
    run_module()

if __name__ == '__main__':
    main()
