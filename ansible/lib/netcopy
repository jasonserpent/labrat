#!/usr/bin/env python

import sys
import os
import re
from ansible.module_utils.basic import AnsibleModule

from jinja2 import Environment, BaseLoader

from termcolor import colored


# NAPALM
from napalm import get_network_driver

# EOS
import pyeapi

ANSIBLE_METADATA = {
    'metadata_version': '1.0',
    'status': ['preview'],
    'supported_by': 'Pedro Antunes <pedro.antunes@eplus.com>'
}



def _eos_copy(address, username, password, src, dest, port=443, **kwargs):
    # Open device
    connection = pyeapi.connect(host=address, transport='https', port=port, username=username, password=password)
    device = pyeapi.client.Node(connection)
    ### Save original config
    pre_config = device.run_commands("show running-config", encoding="text")[0]['output']
    # remove first line showing the command that was run
    pre_config = '\n'.join(pre_config.split('\n')[trim:])

    commands = []
    commands.append("configure session vagrant")
    commands.append("rollback clean-config")

    ## if file exists we load it, otherwise it will be created when getting the config
    if os.path.isfile(config_file):
        # Apologies for stealing this portion of code from NAPALM
        with open(config_file, "r") as f:
            lines = f.readlines()

    for line in lines:
        line = line.strip()
        if line == "":
            continue
        if line.startswith("!") and not line.startswith("!!"):
            continue
        commands.append(line)

    for start, depth in [
        (s, d) for (s, d) in EOS_HEREDOC_COMMANDS if s in commands
    ]:
        commands = _eos_multiline_convert(commands, start=start, depth=depth)
    commands = _eos_mode_comment_convert(commands)
    device.run_commands(commands)

    # repeat the same with the banner
    commands = []
    commands.append("configure session vagrant")
    ## Set banner and motd if given
    banner_template = Environment(loader=BaseLoader).from_string(EOS_BANNER_TEMPLATE)
    banner_config = banner_template.render(banner=banner, motd=motd).replace("\\\\", "`").replace("\\n", "\n")
    lines = banner_config.splitlines()
    for line in lines:
        line = line.strip()
        if line == "":
            continue
        if line.startswith("!") and not line.startswith("!!"):
            continue
        commands.append(line)
    for start, depth in [
        (s, d) for (s, d) in EOS_HEREDOC_COMMANDS if s in commands
    ]:
        commands = _eos_multiline_convert(commands, start=start, depth=depth)
    commands = _eos_mode_comment_convert(commands)
    device.run_commands(commands)

    post_config = device.run_commands("show session-config named vagrant", encoding="text")[0]['output']
    post_config = '\n'.join(post_config.split('\n')[2:])

    if not check_mode:
        # Return and clean sessions if there is no diff
        # We still save the well formatter config
        if pre_config == post_config:
            device.run_commands("no configure session vagrant")
            with open(config_file, "w") as f:
                f.write(post_config)
                f.close()
                return

        # Commit config
        device.run_commands(["configure session vagrant",
                             "commit",
                             "no configure session vagrant",
                             "write memory",
                             ])
        # Save new config
        file = open(config_file, "w") 
        file.write(post_config)
        file.close()

    else:
        # Save candidate config
        device.run_commands("no configure session vagrant")
        if pre_config == post_config:
            return

    ## Return diffs
    return dict(
            before=pre_config,
            after=post_config
            )


def run_module():

    module = AnsibleModule(
        argument_spec=dict(
            address=dict(type='str', required=True, aliases=['host','hostname']),
            dev_os=dict(type='str', required=True),
            username=dict(type='str', required=True),
            password=dict(type='str', required=True, no_log=True),
            src=dict(type='str', required=True),
            dest=dict(type='str', required=True),
            model=dict(type='str', required=True),
            ssh_private_key_file=dict(type='str', required=False),
            port=dict(type='int', required=False)
        ),
        supports_check_mode=True
    )

    address = module.params['address']
    dev_os = module.params['dev_os']
    username = module.params['username']
    password = module.params['password']
    src = module.params['src']
    dest = module.params['dest']
    model = module.params['model']

    if 'ssh_private_key_file' in module.params:
        ssh_private_key_file = module.params['ssh_private_key_file']
    if 'port' in module.params:
        port = module.params['port']

    _config = {
               'eos'    : _eos_copy,
    }

    result = dict(
        changed=False
    )

    module.exit_json(**result)



def main():
    run_module()

if __name__ == '__main__':
    main()
