#!/usr/bin/env python

import sys
import os
import re
from ansible.module_utils.basic import AnsibleModule

from jinja2 import Environment, BaseLoader

# Junos
from jnpr.junos import Device
from jnpr.junos.utils.config import Config
from jnpr.junos.exception import RpcError
# EOS
import pyeapi
# PAN-OS
from lxml import etree
import requests
from urllib.parse import quote
from io import StringIO, BytesIO

# NAPALM
from napalm import get_network_driver

ANSIBLE_METADATA = {
    'metadata_version': '1.0',
    'status': ['preview'],
    'supported_by': 'Pedro Antunes <pedro.antunes@eplus.com>'
}

def _panos_backup(address, username, password, config_file, trim, check_mode, **kwargs):
    # Get key
    url = "https://{}/api/?type=keygen&user={}&password={}".format(
         quote(address), quote(username), quote(password))
    response = requests.get(url, verify=False)
    tree = etree.parse(StringIO(response.text))
    key = tree.xpath('/response/result/key')[0].text

    # Get configuration
    url = "https://{}/api/?type=export&category=configuration&key={}".format(
          quote(address), quote(key))
    response = requests.get(url, verify=False)
    tree = etree.parse(StringIO(response.text))
    post_config = etree.tostring(tree, pretty_print=True).decode('utf-8')

    # Open current config
    pre_config = ""
    if os.path.isfile(config_file):
        with open(config_file, "r") as f:
            pre_config = f.read()
            f.close()

    if not check_mode:
        with open(config_file, "w") as f:
            f.write(post_config)
            f.close()

    ## Return diffs
    if pre_config == post_config:
        return

    return dict(
            before=pre_config,
            after=post_config
            )



def _junos_backup(address, username, password, config_file, check_mode, trim, ssh_config_file=None,
        ssh_private_key_file=None, **kwargs ):
    # Open device
    if ssh_private_key_file is not None:
        device = Device(host=address, user=username, ssh_private_key_file=ssh_private_key_file, port=22)
    else:
        device = Device(host=address, user=username, passwd=password, port=22)
    device.open(gather_facts=False)
    # Open current config
    pre_config = ""
    if os.path.isfile(config_file):
        with open(config_file, "r") as f:
            pre_config = f.read()

    post_config = device.rpc.get_config(options={'format': 'text'}).text
    post_config = '\n'.join(post_config.split('\n')[trim:])

    if not check_mode:
        with open(config_file, "w") as f:
            f.write(post_config)

    device.close()
    # Return diffs
    if pre_config == post_config:
        return

    return dict(
            before=pre_config,
            after=post_config
            )



def _cisco_backup(address, username, password, config_file, check_mode, dev_os, model, ssh_config_file=None,
        ssh_private_key_file=None, trim=0):
    # Open current config
    pre_config = ""
    if os.path.isfile(config_file):
        with open(config_file, "r") as f:
            pre_config = f.read()

    driver = get_network_driver(dev_os)
    if model == 'nx-osv':
        device = driver(address, username, password, optional_args=dict(transport='http'))
    else:
        device = driver(address, username, password)

    device.open()
    post_config = device.get_config(retrieve="running")['running']
    post_config = '\n'.join(post_config.split('\n')[trim:])
    if model == 'csrv':
        post_config = re.sub(r'license udi [\w ]+', "!", post_config, flags=re.MULTILINE)
    device.close()

    if not check_mode:
        with open(config_file, "w") as f:
            f.write(post_config)

    # Return diffs
    if pre_config == post_config:
        return

    return dict(
            before=pre_config,
            after=post_config
            )

def _eos_backup(address, username, password, config_file, trim, check_mode, port=443, **kwargs):
    # Open device
    connection = pyeapi.connect(host=address, transport='https', port=port, username=username, password=password)
    device = pyeapi.client.Node(connection)

    # Open current config
    pre_config = ""
    if os.path.isfile(config_file):
        with open(config_file, "r") as f:
            pre_config = f.read()
            f.close()

    post_config = device.run_commands("show running-config", encoding="text")[0]['output']
    post_config = '\n'.join(post_config.split('\n')[trim:])

    if not check_mode:
        with open(config_file, "w") as f:
            f.write(post_config)
            f.close()

    ## Return diffs
    if pre_config == post_config:
        return

    return dict(
            before=pre_config,
            after=post_config
            )


def run_module():

    module = AnsibleModule(
        argument_spec=dict(
            address=dict(type='str', required=True, aliases=['host','hostname']),
            dev_os=dict(type='str', required=True),
            username=dict(type='str', required=True),
            password=dict(type='str', required=True, no_log=True),
            config_file=dict(type='str', required=True),
            model=dict(type='str', required=True),
            ssh_private_key_file=dict(type='str', required=False),
            port=dict(type='int', required=False)
        ),
        supports_check_mode=True
    )

    address = module.params['address']
    dev_os = module.params['dev_os']
    username = module.params['username']
    password = module.params['password']
    config_file = module.params['config_file']
    model = module.params['model']

    if 'port' in module.params:
        port = module.params['port']

    if 'ssh_private_key_file' in module.params:
        ssh_private_key_file = module.params['ssh_private_key_file']

    _backup = {
               'eos'    : _eos_backup,
               'ios'    : _cisco_backup,
               'iosxr'  : _cisco_backup,
               'junos'  : _junos_backup,
               'nxos'   : _cisco_backup,
               'panos'  : _panos_backup
    }

    _trim = {
               'csrv'   : 5,
               'eos'     : 2,
               'iosxrv' : 3,
               'iosv'   : 6,
               'iosvl2' : 6,
               'nx-osv' : 5,
               'vmx'    : 2,
               'vptx'   : 2,
               'vqfx'   : 2,
               'vrr'    : 2,
               'vsrx'   : 2,
               'pavm'   : 0,
               'veos'   : 2
    }

    try:
       trim = _trim[model]
    except:
       trim = 2

    try:
        os.makedirs(os.path.dirname(config_file), 0o755)
    except FileExistsError:
        pass
    diff = _backup[dev_os](address=address,
                   username=username, password=password, ssh_private_key_file=ssh_private_key_file,
                   check_mode=module.check_mode,
                   config_file=config_file,
                   model=model,
                   port=port,
                   trim=trim,
                   dev_os=dev_os)

    if diff is None:
        result = dict(
            changed=False
        )
    else:
        result = dict(
            changed=True,
            diff=diff
        )

    module.exit_json(**result)



def main():
    run_module()

if __name__ == '__main__':
    main()
